// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "darwin-arm64"]
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // In development, you can skip migrations and use db push directly
  // This allows rapid schema changes without migration files
}

enum UserRole {
  user
  org_admin
  super_admin

  @@map("user_role")
}

enum ProfileStatus {
  pending
  active
  suspended

  @@map("profile_status")
}

enum PairingPeriodStatus {
  upcoming
  active
  closed

  @@map("pairing_period_status")
}

enum PairingStatus {
  planned
  matched
  met
  not_met
  cancelled

  @@map("pairing_status")
}

model Organization {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  code      String   @unique
  size      Int?
  address   String?
  imageUrl  String?  @map("image_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  users           User[]
  pairingPeriods  PairingPeriod[]
  pairings        Pairing[]
  bans            Ban[]
  algorithmConfig AlgorithmSetting?

  @@map("organizations")
}

model User {
  id                String             @id @db.Uuid
  organizationId    String             @map("organization_id") @db.Uuid
  organization      Organization       @relation(fields: [organizationId], references: [id])
  email             String
  emailVerified     Boolean
  passwordHash      String?            @map("password_hash")
  firstName         String?            @map("first_name")
  lastName          String?            @map("last_name")
  about             String?            @db.Text
  hobbies           String?            @db.Text
  preferredActivity String?            @map("preferred_activity")
  interests         String?            @db.Text
  profileImageUrl   String?            @map("avatar_url") @db.Text
  isActive          Boolean            @default(true) @map("is_active")
  suspendedUntil    DateTime?          @map("suspended_until") @db.Date
  image             String?            @db.Text
  createdAt         DateTime
  updatedAt         DateTime
  role              UserRole           @default(user)
  profileStatus     ProfileStatus      @default(pending)
  supabaseUserId    String?            @unique
  pairingsAsUserA   Pairing[]          @relation("UserPairingA")
  pairingsAsUserB   Pairing[]          @relation("UserPairingB")
  messages          Message[]          @relation("MessageSender")
  availability      UserAvailability[]
  reportsAuthored   Report[]           @relation("ReportsAuthored")
  reportsReceived   Report[]           @relation("ReportsReceived")
  reportsResolved   Report[]           @relation("ReportsResolved")
  bans              Ban[]              @relation("UserBans")
  bansIssued        Ban[]              @relation("UserBanActions")
  blocksInitiated   UserBlock[]        @relation("UserBlocksBlocker")
  blocksReceived    UserBlock[]        @relation("UserBlocksBlocked")

  @@unique([email])
  @@map("user")
}

model PairingPeriod {
  id             String              @id @default(uuid()) @db.Uuid
  organizationId String              @map("organization_id") @db.Uuid
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  startDate      DateTime?           @map("start_date") @db.Date
  endDate        DateTime?           @map("end_date") @db.Date
  status         PairingPeriodStatus @default(active)
  createdAt      DateTime            @default(now()) @map("created_at")

  pairings Pairing[]

  @@index([organizationId])
  @@map("pairing_periods")
}

model Pairing {
  id             String        @id @default(uuid()) @db.Uuid
  periodId       String        @map("period_id") @db.Uuid
  organizationId String?       @map("organization_id") @db.Uuid
  userAId        String        @map("user_a_id") @db.Uuid
  userBId        String        @map("user_b_id") @db.Uuid
  status         PairingStatus @default(planned)
  createdAt      DateTime      @default(now()) @map("created_at")

  period       PairingPeriod @relation(fields: [periodId], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])
  userA        User          @relation("UserPairingA", fields: [userAId], references: [id], onDelete: Cascade)
  userB        User          @relation("UserPairingB", fields: [userBId], references: [id], onDelete: Cascade)
  messages     Message[]
  reports      Report[]

  @@unique([periodId, userAId, userBId])
  @@index([organizationId])
  @@index([status])
  @@index([userAId, userBId])
  @@map("pairings")
}

model Message {
  id        String   @id @default(uuid()) @db.Uuid
  pairingId String   @map("pairing_id") @db.Uuid
  senderId  String   @map("sender_id") @db.Uuid
  content   String   @db.Text
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")

  pairing Pairing @relation(fields: [pairingId], references: [id], onDelete: Cascade)
  sender  User    @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([pairingId])
  @@index([senderId])
  @@map("messages")
}

model UserAvailability {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  dayOfWeek Int       @map("day_of_week")
  timeFrom  DateTime? @map("time_from") @db.Time
  timeTo    DateTime? @map("time_to") @db.Time
  note      String?
  recurring Boolean   @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_availability")
}

model Report {
  id             String   @id @default(uuid()) @db.Uuid
  reporterId     String   @map("reporter_id") @db.Uuid
  reportedUserId String   @map("reported_user_id") @db.Uuid
  pairingId      String   @map("pairing_id") @db.Uuid
  reason         String?  @db.Text
  createdAt      DateTime @default(now()) @map("created_at")
  resolvedById   String?  @map("resolved_by") @db.Uuid
  resolutionNote String?  @map("resolution_note")

  reporter     User    @relation("ReportsAuthored", fields: [reporterId], references: [id])
  reportedUser User    @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  pairing      Pairing @relation(fields: [pairingId], references: [id])
  resolvedBy   User?   @relation("ReportsResolved", fields: [resolvedById], references: [id])

  @@index([reporterId])
  @@index([reportedUserId])
  @@index([pairingId])
  @@map("reports")
}

model Ban {
  id             String    @id @default(uuid()) @db.Uuid
  organizationId String?   @map("organization_id") @db.Uuid
  userId         String?   @map("user_id") @db.Uuid
  reason         String?   @db.Text
  bannedById     String?   @map("banned_by") @db.Uuid
  createdAt      DateTime  @default(now()) @map("created_at")
  expiresAt      DateTime? @map("expires_at")

  organization Organization? @relation(fields: [organizationId], references: [id])
  user         User?         @relation("UserBans", fields: [userId], references: [id])
  bannedBy     User?         @relation("UserBanActions", fields: [bannedById], references: [id])

  @@index([organizationId])
  @@index([userId])
  @@map("bans")
}

model AlgorithmSetting {
  id               String   @id @default(uuid()) @db.Uuid
  organizationId   String   @unique @map("organization_id") @db.Uuid
  periodLengthDays Int?     @map("period_length_days")
  randomSeed       Int?     @map("random_seed")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("algorithm_settings")
}

model UserBlock {
  id             String   @id @default(uuid()) @db.Uuid
  blockerId      String   @map("blocker_id") @db.Uuid
  blockedId      String   @map("blocked_id") @db.Uuid
  createdAt      DateTime @default(now()) @map("created_at")

  blocker      User         @relation("UserBlocksBlocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked      User         @relation("UserBlocksBlocked", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@map("user_blocks")
}
