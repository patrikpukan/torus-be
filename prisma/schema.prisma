// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "darwin-arm64"]
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // In development, you can skip migrations and use db push directly
  // This allows rapid schema changes without migration files
}

enum UserRole {
  user
  org_admin
  super_admin

  @@map("user_role")
}

enum ProfileStatus {
  pending
  active
  suspended

  @@map("profile_status")
}

enum PairingPeriodStatus {
  upcoming
  active
  closed

  @@map("pairing_period_status")
}

enum PairingStatus {
  planned
  matched
  met
  not_met
  cancelled

  @@map("pairing_status")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @db.VarChar(255)
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?  @db.VarChar(45)
  userAgent String?  @db.Text
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  activeOrganizationId String?

  @@unique([token])
  @@index([userId])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String    @db.Uuid
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?   @db.Text
  createdAt             DateTime
  updatedAt             DateTime

  @@index([userId])
  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id        String             @id @default(uuid()) @db.Uuid
  name      String
  code      String             @unique
  size      Int?
  address   String?
  imageUrl  String?            @map("image_url")
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")

  users           User[]
  pairingPeriods  PairingPeriod[]
  pairings        Pairing[]
  bans            Ban[]
  algorithmConfig AlgorithmSetting?

  @@map("organizations")
}

model User {
  id               String    @id @db.Uuid
  organizationId   String    @map("organization_id") @db.Uuid
  organization     Organization @relation(fields: [organizationId], references: [id])
  email            String
  emailVerified    Boolean
  passwordHash     String?   @map("password_hash")
  firstName        String?   @map("first_name")
  lastName         String?   @map("last_name")
  about            String?   @db.Text
  hobbies          String?   @db.Text
  preferredActivity String?  @map("preferred_activity")
  interests        String?   @db.Text
  profileImageUrl  String?   @db.Text @map("avatar_url")
  isActive         Boolean   @default(true) @map("is_active")
  suspendedUntil   DateTime? @map("suspended_until") @db.Date
  image            String?   @db.Text
  createdAt        DateTime
  updatedAt        DateTime
  sessions         Session[]
  accounts         Account[]
  role             UserRole  @default(user)
  profileStatus    ProfileStatus @default(pending)
  supabaseUserId   String?   @unique
  username         String?   @db.VarChar(50)
  displayUsername  String?   @db.VarChar(50)
  pairingsAsUserA  Pairing[] @relation("UserPairingA")
  pairingsAsUserB  Pairing[] @relation("UserPairingB")
  messages         Message[] @relation("MessageSender")
  availability     UserAvailability[]
  reportsAuthored  Report[]  @relation("ReportsAuthored")
  reportsReceived  Report[]  @relation("ReportsReceived")
  reportsResolved  Report[]  @relation("ReportsResolved")
  bans             Ban[]     @relation("UserBans")
  bansIssued       Ban[]     @relation("UserBanActions")
  googleConnection GoogleConnection?

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model PairingPeriod {
  id             String              @id @default(uuid()) @db.Uuid
  organizationId String              @map("organization_id") @db.Uuid
  organization   Organization        @relation(fields: [organizationId], references: [id])
  startDate      DateTime?           @map("start_date") @db.Date
  endDate        DateTime?           @map("end_date") @db.Date
  status         PairingPeriodStatus @default(active)
  createdAt      DateTime            @default(now()) @map("created_at")

  pairings       Pairing[]

  @@index([organizationId])
  @@map("pairing_periods")
}

model Pairing {
  id             String        @id @default(uuid()) @db.Uuid
  periodId       String        @map("period_id") @db.Uuid
  organizationId String?       @map("organization_id") @db.Uuid
  userAId        String        @map("user_a_id") @db.Uuid
  userBId        String        @map("user_b_id") @db.Uuid
  status         PairingStatus @default(planned)
  createdAt      DateTime      @default(now()) @map("created_at")

  period        PairingPeriod @relation(fields: [periodId], references: [id])
  organization  Organization? @relation(fields: [organizationId], references: [id])
  userA         User          @relation("UserPairingA", fields: [userAId], references: [id])
  userB         User          @relation("UserPairingB", fields: [userBId], references: [id])
  messages      Message[]
  reports       Report[]

  @@unique([periodId, userAId, userBId])
  @@index([organizationId])
  @@index([status])
  @@index([userAId, userBId])
  @@map("pairings")
}

model Message {
  id        String   @id @default(uuid()) @db.Uuid
  pairingId String   @map("pairing_id") @db.Uuid
  senderId  String   @map("sender_id") @db.Uuid
  content   String   @db.Text
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")

  pairing Pairing @relation(fields: [pairingId], references: [id])
  sender  User    @relation("MessageSender", fields: [senderId], references: [id])

  @@index([pairingId])
  @@index([senderId])
  @@map("messages")
}

model UserAvailability {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  dayOfWeek Int      @map("day_of_week")
  timeFrom  DateTime? @map("time_from") @db.Time
  timeTo    DateTime? @map("time_to") @db.Time
  note      String?
  recurring Boolean  @default(true)

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("user_availability")
}

model Report {
  id              String   @id @default(uuid()) @db.Uuid
  reporterId      String   @map("reporter_id") @db.Uuid
  reportedUserId  String   @map("reported_user_id") @db.Uuid
  pairingId       String   @map("pairing_id") @db.Uuid
  reason          String?  @db.Text
  createdAt       DateTime @default(now()) @map("created_at")
  resolvedById    String?  @map("resolved_by") @db.Uuid
  resolutionNote  String?  @map("resolution_note")

  reporter      User    @relation("ReportsAuthored", fields: [reporterId], references: [id])
  reportedUser  User    @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  pairing       Pairing @relation(fields: [pairingId], references: [id])
  resolvedBy    User?   @relation("ReportsResolved", fields: [resolvedById], references: [id])

  @@index([reporterId])
  @@index([reportedUserId])
  @@index([pairingId])
  @@map("reports")
}

model Ban {
  id             String        @id @default(uuid()) @db.Uuid
  organizationId String?       @map("organization_id") @db.Uuid
  userId         String?       @map("user_id") @db.Uuid
  reason         String?       @db.Text
  bannedById     String?       @map("banned_by") @db.Uuid
  createdAt      DateTime      @default(now()) @map("created_at")
  expiresAt      DateTime?     @map("expires_at")

  organization Organization? @relation(fields: [organizationId], references: [id])
  user         User?         @relation("UserBans", fields: [userId], references: [id])
  bannedBy     User?         @relation("UserBanActions", fields: [bannedById], references: [id])

  @@index([organizationId])
  @@index([userId])
  @@map("bans")
}

model AlgorithmSetting {
  id               String        @id @default(uuid()) @db.Uuid
  organizationId   String        @unique @map("organization_id") @db.Uuid
  periodLengthDays Int?          @map("period_length_days")
  randomSeed       Int?          @map("random_seed")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  organization Organization @relation(fields: [organizationId], references: [id])

  @@map("algorithm_settings")
}

model GoogleConnection {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @unique @map("user_id") @db.Uuid
  googleUserId String?  @map("google_user_id")
  accessToken  String?  @map("access_token")
  refreshToken String?  @map("refresh_token")
  tokenExpiry  DateTime? @map("token_expiry")
  connectedAt  DateTime? @map("connected_at")

  user User @relation(fields: [userId], references: [id])

  @@map("google_connections")
}

model OrgAdmin {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("org_admin")
}
