// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "darwin-arm64"]
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  org_admin
  system_admin

  @@map("user_role")
}

enum ProfileStatus {
  pending
  active
  suspended

  @@map("profile_status")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @db.VarChar(255)
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?  @db.VarChar(45)
  userAgent String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  activeOrganizationId String?

  @@unique([token])
  @@index([userId])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?   @db.Text
  createdAt             DateTime
  updatedAt             DateTime

  @@index([userId])
  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model User {
  id              String    @id
  name            String
  email           String
  emailVerified   Boolean
  image           String?   @db.Text
  createdAt       DateTime
  updatedAt       DateTime
  sessions        Session[]
  accounts        Account[]
  role            UserRole  @default(user)
  profileImageUrl   String?   @db.Text
  profileStatus     ProfileStatus @default(pending)
  supabaseUserId    String?   @unique

  username        String? @db.VarChar(50)
  displayUsername String? @db.VarChar(50)

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model OrgAdmin {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("org_admin")
}
